首先需要说明：
《JVM虚拟机规范中》，没有定义【字符串常量池】，这个String Constant Pool是HotSpot VM提供的内存区域，用于存放字面量，用于节省内存用；
eg：很多 .class 都有同一个字面量，为了节省内存，都指向同一个地方；


---------------------


翻遍了《Java虚拟机规范》文档，没有找到【字符串常量池】的概念
【明确规定了的常量池】有两个：
{
    The Constant Pool；（常量池）
    https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4

    Run-Time Constant Pool；（运行时常量池）
    https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.5
}


---------------------


字符串常量池的本质内存数据结构：【StringTable】
①【全局数据结构：单例-共享】
②【native memory】中，默认⼤⼩为【65535】
③【不保存String字面量】，只保存Ref
④【-XX:StringTableSize=66666】
【详情如下】
【StringTable】是HotSpot VM⾥⽤来实现字符串驻留功能的【全局数据结构】。如果
⽤Java语法来说，这个StringTable其实就是个【HashSet<String>】:
    {
        StringTable存放于native memory中，默认⼤⼩为65535；
        它并不保存驻留String对象本身，⽽是存储这些被驻留的String对象的引⽤。
        VM层⾯触发的字符串驻留:
        {
            ①例如把Class⽂件⾥的CONSTANT_String类型常量转换为运⾏时对象; （运⾏时常量池）
            ②以及Java代码主动触发的字符串驻留（java.lang.String.intern()）；
        }
    }
    ①②以上两种请求都由StringTable来处理；
}
【须知】
{
    jdk<=6时，hotspot vm（听话宝宝） 永久带完全包含方法区，所以运行时常量池也在永久带中；
    【字符串本体】
    {
        堆中；（具体的）
        永久带中；（Copy的）
    }
    jdk>=7时，hotspot vm
    【字符串本体】
    {
        堆中；（具体的）
    }
}


---------------------


字符串常量池里放的是什么？

在JDK6.0及之前版本中，String Pool里放的都是字符串常量；
在JDK7.0中，由于String#intern()发生了改变，因此String Pool中也可以存放放于堆内的字符串对象的引用。关于String在内存中的存储和String#intern()方法的说明，可以参考我的另外一篇博客：
需要说明的是：字符串常量池中的字符串只存在一份！
如：

String s1 = "hello,world!";
String s2 = "hello,world!";
1
2
即执行完第一行代码后，常量池中已存在 “hello,world!”，那么 s2不会在常量池中申请新的空间，而是直接把已存在的字符串内存地址返回给s2。(这里具体的字符串如何分配就不细说了，可以看我的另一篇博客)

运行时常量池(Runtime Constant Pool)：
运行时常量池存在于内存中，也就是class常量池被加载到内存之后的版本，不同之处是：它的字面量可以动态的添加(String#intern()),符号引用可以被解析为直接引用
JVM在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在解析阶段，会把符号引用替换为直接引用，解析的过程会去查询字符串常量池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与字符串常量池中是一致的。
————————————————
版权声明：本文为CSDN博主「zhuminChosen」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/zm13007310400/article/details/77534349


---------------------


首先几个问题：
方法区、永久带、元空间之间的联系？
方法区是虚拟机规范；
永久带，元空间都是方法区的实现方式：
{
    永久带包含了方法区概念的【所有】；
    元空间只包含了方法区概念的【部分】；
}


---------------------


