【须知】
JIT在《虚拟机规范中》存在记载，始见于2.13


静态编译优化和动态编译优化最大的不同是他们在编译时所得到的信息量的不同。
静态编译在运行程序之前就把所有的执行代码编译完，这时编译器所接受的编译信息量是不够多的。
比如说：某个函数是否是大量地被调用了，函数的实参是不是一直是一个常数，等等。
动态编译之于静态编译，缺点是它需要即时编译代码，但是有一个优点---编译器可以获得静态编译期所没有的信息。
比如：通过运行时的profiling可以知道哪些函数是被大量使用的。在哪些execution path上哪些函数的参数一直都没有变，等等。
不要小看这些信息，当即时编译器了解这些信息之后可以在短时间内编译出比静态编译器更优质的二进制码。
举例来说，一般程序也遵循90-10原则，即运行时的90%里计算机是在处理其中10%的代码，寻找到这些执行热点代码进行深度优化能得到比静态编译更好的性能（因为已知更多信息量）。
然而现实是：即时编译的开销非常大，暂时还不能超越静态编译的总体性能。不过，一个动态语言（如JAVA，Python）有着静态语言（如C++）所没有的各种优势，必然是将来程序语言发展的方向。
伴随着强大的需求，即时编译器在将来也会更加强大。

作者：Alan Li
链接：https://www.zhihu.com/question/19672491/answer/13568243
